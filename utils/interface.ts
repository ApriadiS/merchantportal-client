import type { AdminPromoType, ItemType, DiscountType } from "./types";

/**
 * Interfaces for database tables:
 * - public.store
 * - public.promo
 * - public.promo_store
 *
 * Request interfaces represent payloads used to create/update rows (omit generated PKs).
 * Response interfaces represent full rows returned from the database.
 */

// User-defined / unknown enum from DB â€” keep as string for now, can be tightened later.

/* ---------------------- public.store ---------------------- */
/** Full row returned from `public.store` */
export interface StoreResponse {
   id: number; // GENERATED ALWAYS AS IDENTITY
   name: string;
   company: string;
   address: string;
   // `route` is nullable in the schema (no NOT NULL constraint)
   route: string;
   store_type: string;
}

/** Payload to create or update a `public.store` row. `id` is generated by DB. */
export interface StoreRequest {
   name: string;
   company: string;
   address: string;
   route: string;
   store_type: string;
}

/* ---------------------- public.promo ---------------------- */
/** Full row returned from `public.promo` (v2.1.0 schema) */
export interface PromoResponse {
   id_promo: number;
   title_promo: string;
   min_transaction_promo: number;
   tenor_promo: number;
   subsidi_promo: number;
   admin_promo: number;
   admin_promo_type: AdminPromoType;
   interest_rate: number;
   voucher_code: string;
   is_active: boolean;
   start_date_promo: string;
   end_date_promo: string;
   free_installment: number;
   discount?: number;
   discount_type?: DiscountType;
   max_discount?: number;
}

/** Payload to create a `public.promo` row (v2.1.0 schema) */
export interface PromoRequest {
   title_promo: string;
   min_transaction_promo: number;
   tenor_promo: number;
   subsidi_promo?: number;
   admin_promo: number;
   admin_promo_type: AdminPromoType;
   interest_rate: number;
   voucher_code: string;
   start_date_promo: string | Date;
   end_date_promo: string | Date;
   free_installment?: number;
   is_active?: boolean;
   discount?: number;
   discount_type?: DiscountType;
   max_discount?: number;
}

/* ---------------------- public.promo_store ---------------------- */
/** Full row returned from `public.promo_store` (v2.1.0 - composite key) */
export interface PromoStoreResponse {
   promo_id: number; // Primary key part 1
   store_id: number; // Primary key part 2
   // No 'id' field in v2.1.0
}

/** Payload to create a `public.promo_store` row. `id` is generated by DB. */
export interface PromoStoreRequest {
   promo_id: number;
   store_id: number;
}

/* ---------------------- Object Data ---------------------- */
export interface PromoObject {
   title_promo: string;
   min_transaction_promo: number;
   tenor_promo: number;
   subsidi_promo: number;
   admin_promo: number;
   admin_promo_type: AdminPromoType;
   interest_rate: number;
   voucher_code: string;
   is_active: boolean;
   start_date_promo: string;
   end_date_promo: string;
   free_installment: number;
   discount?: number;
   discount_type?: DiscountType;
   max_discount?: number;
}

export interface StoreObject {
   name: string;
   company: string;
   address: string;
   route: string;
}
/* ---------------------- Item Store & Promo Props Component Data ---------------------- */
export interface ItemStoreProps {
   data: StoreObject;
   buttons: { label: string; onclick: () => void }[];
}
export interface ItemPromoProps {
   data: PromoObject;
   dataStores?: string[];
   buttons: { label: string; onclick: (voucher_code: string) => void }[];
}

export interface CRUDComponentProps {
   data: ItemType;
}
